/*
* Tiny13Test.cpp
*
* Created: 04-Feb-21 11:16:39 AM
* Author : mirus

* The device is shipped with CKSEL=10, SUT =10, and CKDIV8 programmed.
* The default clock source setting is therefore the Internal RC Oscillator running at 9.6 MHz with longest startup
* time and an initial system clock prescaling of 8.
*
*	TIMERS
*	T[period (sec)] = ((256 or 65536 [8/16 bit]) * Prescaler)) / F_CPU
*	Example T = (256*1024)/1000000 = 0.26
*	So that the timer will be overflowed every 0.26 sec, ~ 4Hz.
*
*
*/

#define F_CPU 9600000UL
//#define F_CPU 1200000UL


#include <avr/io.h>
#include <util/delay.h>
#include <avr/power.h>
#include <avr/sleep.h>
#include <avr/interrupt.h>

#define BIT_SET(a,b) ((a) |= (1<<(b)))
#define BIT_CLE(a,b) ((a) &= ~(1<<(b)))
#define BIT_FLIP(a,b) ((a) ^= (1<<(b)))
#define BIT_CHECK(a,b) ((a) & (1<<(b)))



#define LED_PIN PINB4
#define IR_PIN PINB1


//ISR(TIM0_OVF_vect)
//{
//BIT_FLIP(PORTB, LED_PIN);
//}

/*
BIT_CHECK(TIFR0,TOV0) <= this works either with:
1. disabled Timer Overflow interrupt
2. enabled Timer Overflow interrupt and ISR(TIM0_OVF_vect) configured.
*/
volatile int NextBit = 32;
volatile unsigned long RecdData =0;

ISR(INT0_vect)
{
	
	
	// 139		14.82 ms
	// 127		13.54 ms
	// 116		12.37 ms
	// 115		12.26 ms
	// 95		10.13 ms
	// 26		2.77  ms
	// 15		1.6   ms


	
	int Time = TCNT0;
	int Overflow = BIT_CHECK(TIFR0,TOV0);
	
	
	if (NextBit == 32) {
		
		if ((Time >= 115) && (Time <= 139) && (Overflow == 0)) {           //12.26-14.82  Leading pulse burst 9ms && 4.5ms space
			
			RecdData = 0; NextBit = 0;
			} else if ((Time >= 95) && (Time <= 116) && (Overflow == 0)) { //10.13-12.37  REPEAT CODE a 9ms leading pulse - 2.25ms space - 562.5Âµs pulse
			// do something on a repeating signal
			
		}
		
		} else {
		
		if ((Time > 26) || (Overflow != 0)) {                              //2.77
			NextBit = 32; // Invalid - restart
			
		}
		else {
			if (Time > 15) {                                                //1.6  HIGH 0
				RecdData = RecdData | ((unsigned long) 1<< (31-NextBit));         // the result will be inverted xxxx xxxx 11111 0000
				
			}
			
			
			if (NextBit == 31) {
				
				if(RecdData == 0xFFA25D) {
					BIT_SET(PORTB, LED_PIN);
				}else if(RecdData == 0xFFE21D) {
					BIT_CLE(PORTB, LED_PIN);
				}
				
				
				
				// data processing here, as we have a full dataset i.e. 32 bit
			}
			NextBit++;
		}
	}
	
	
	TCNT0 = 0;              // Clear counter
	BIT_SET(TIFR0,TOV0);    // Clear overflow flag :)
	//BIT_SET(GIFR, INTF0);   // Clear INT0 flag
	
}


int main(void)
{
	clock_prescale_set(clock_div_1); // Lets run at 9.6 MHz
	//clock_prescale_set(clock_div_64); // Lets run at 150Khz

	BIT_SET(ACSR, ACD);					// Disable Analog Comparator
	BIT_CLE(ADCSRB, ACME);				// Disable Analog to Digital Converter

	BIT_SET(DDRB, LED_PIN);  // set LED_PIN as output
	BIT_CLE(DDRB, IR_PIN);   // set IR PIN as input
	BIT_SET(PORTB, IR_PIN);  // pull up res for IR PIN
	
	BIT_SET(TCCR0B, CS02);  // set timer prescaler to 1024 (if CLK=1200000Hz/1024/256 = ~4.58Hz, =~0.22s overflow) One tick period is ~853mk seconds
	BIT_SET(TCCR0B, CS00);  // set timer prescaler to 1024 (if CLK=9600000Hz/1024/256 = ~37Hz,   =~27ms  overflow) One tick period is ~107mk seconds
	
	
	BIT_SET(GIMSK, INT0);  // enable interrupt on INT0
	BIT_SET(MCUCR, ISC01); // falling edge on INT0
	BIT_CLE(MCUCR, ISC00);
	
	//BIT_SET(TIMSK0,TOIE0); // enable Timer Overflow interrupt
	set_sleep_mode(SLEEP_MODE_IDLE);
	sei(); // enable global interrupts
	
	
	//BIT_SET(PORTB, LED_PIN);
	
	while (1)
	{
		cli();							// Disable Interrupts
		sleep_enable();					// Enable Sleep Mode
		sleep_bod_disable();			// Disable the Brown Out Detector (during sleep)
		sei();							// Enable Interrupts
		sleep_cpu();					// Go to Sleep
		sleep_disable();				// Entrance point
		_delay_ms(3000);
		/*
		if(RecdData != 0) {
			for (int c = 31; c >= 0; c--)
			{
				int k = RecdData >> c;

				if (k & 1) {
					BIT_SET(PORTB, LED_PIN);
					_delay_ms(100);
					BIT_CLE(PORTB, LED_PIN);
					_delay_ms(200);
					BIT_SET(PORTB, LED_PIN);
					_delay_ms(100);
					BIT_CLE(PORTB, LED_PIN);
				}
				
				else {
					BIT_SET(PORTB, LED_PIN);
					_delay_ms(100);
					BIT_CLE(PORTB, LED_PIN);
				}
				
				_delay_ms(1000);
			}
		}
		
		_delay_ms(3000);
		*/
		/*
		if(BIT_CHECK(TIFR0,TOV0)) {
		BIT_SET(TIFR0,TOV0);    // it clears the overflow flag :)
		BIT_FLIP(PORTB, LED_PIN);
		_delay_ms(10);
		}
		*/
		/*
		if(TCNT0 == 255) {
		BIT_FLIP(PORTB, LED_PIN);
		_delay_ms(10);
		}
		*/
		
		
		/*
		BIT_SET(PORTB, LED_PIN);
		
		_delay_ms(100);
		
		
		BIT_CLE(PORTB, LED_PIN);
		_delay_ms(900);
		*/
		
	}
}